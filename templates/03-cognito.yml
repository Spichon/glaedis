AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub
        - GlaedisUserPool-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub
        - GlaedisClientName-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
      LogoutURLs:
        - !Sub
          - https://www.${ Domain }
          - Domain:
              Fn::ImportValue:
                !Sub
                  - Glaedis-${EnvironmentName}-RootDomain
                  - { EnvironmentName: !Ref EnvironmentName }
      CallbackURLs:
        - !Sub
          - https://www.${ Domain }
          - Domain:
              Fn::ImportValue:
                !Sub
                  - Glaedis-${EnvironmentName}-RootDomain
                  - { EnvironmentName: !Ref EnvironmentName }
      SupportedIdentityProviders:
        - COGNITO

  PostConfirmationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      CodeUri: ./PostConfirmation
      FunctionName: !Sub
        - GlaedisPostConfirmationLambda-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub
              - Glaedis-${EnvironmentName}-CodeBucketName
              - { EnvironmentName: !Ref EnvironmentName }
        S3Key: PostConfirmation.zip
      Handler: main.handler
      MemorySize: 128
      Runtime: python3.8
      Timeout: 60
      Role: !GetAtt PostConfirmationLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME:
            Fn::ImportValue:
              !Sub
                - Glaedis-${EnvironmentName}-UserTableName
                - { EnvironmentName: !Ref EnvironmentName }
          CORS_URL:
            !Sub
              - https://www.${Domain}
              - Domain:
                  Fn::ImportValue:
                    !Sub
                    - Glaedis-${EnvironmentName}-RootDomain
                    - { EnvironmentName: !Ref EnvironmentName }

  PostConfirmationLambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmationLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'

  PostConfirmationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - GlaedisPostConfirmationLambdaRole-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      AssumeRolePolicyDocument:
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: Allow
            Principal:
              Service: [ 'lambda.amazonaws.com' ]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "UserTableAccessPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem*'
                Resource:
                  Fn::ImportValue:
                    !Sub
                      - Glaedis-${EnvironmentName}-UserTableArn
                      - { EnvironmentName: !Ref EnvironmentName }

Outputs:
  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub
        - Glaedis-${EnvironmentName}-CognitoUserPoolId
        - { EnvironmentName: !Ref EnvironmentName }

  CognitoUserPoolArn:
    Description: "Cognito User Pool Id"
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: !Sub
        - Glaedis-${EnvironmentName}-CognitoUserPoolArn
        - { EnvironmentName: !Ref EnvironmentName }

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub
        - Glaedis-${EnvironmentName}-CognitoUserPoolClientId
        - { EnvironmentName: !Ref EnvironmentName }
