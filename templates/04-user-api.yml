AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

Resources:
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn:
        Fn::ImportValue:
          !Sub
          - Glaedis-${EnvironmentName}-RegionalCertArn
          - { EnvironmentName: !Ref EnvironmentName }
      DomainName: !Sub
      - user.${Domain}
      - Domain:
          Fn::ImportValue:
            !Sub
            - Glaedis-${EnvironmentName}-RootDomain
            - { EnvironmentName: !Ref EnvironmentName }
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    DependsOn:
      - UserApiDeployment0
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref UserApi
      Stage: !Ref EnvironmentName

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue:
          !Sub
          - Glaedis-${EnvironmentName}-HostedZoneId
          - { EnvironmentName: !Ref EnvironmentName }
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt DomainName.RegionalHostedZoneId
        DNSName: !GetAtt DomainName.RegionalDomainName

  UserApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub
        - glaedis-ApiGateway-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /generate-key:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseTemplates:
                      application/json: |
                        {}
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''*'''
              consumes:
                - application/json
              summary: CORS support
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  description: Default response for CORS method
              produces:
                - application/json
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateKeyFunction.Arn}/invocations
              security:
                - CognitoUserPoolAuthorizer: []
              responses: {}
          /user:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseTemplates:
                      application/json: |
                        {}
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''*'''
              consumes:
                - application/json
              summary: CORS support
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  description: Default response for CORS method
              produces:
                - application/json
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations
              security:
                - CognitoUserPoolAuthorizer: []
              responses: {}
        swagger: '2.0'
        securityDefinitions:
          CognitoUserPoolAuthorizer:
            in: header
            type: apiKey
            name: Authorization
            x-amazon-apigateway-authorizer:
              providerARNs:
                - Fn::ImportValue:
                    !Sub
                    - Glaedis-${EnvironmentName}-CognitoUserPoolArn
                    - { EnvironmentName: !Ref EnvironmentName }
              type: cognito_user_pools
            x-amazon-apigateway-authtype: cognito_user_pools

  UserApiDeployment0:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref UserApi
      Description: 'RestApi deployment id: 0'
      StageName: !Ref EnvironmentName

  GetUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - GlaedisGetUserLambda-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      Handler: main.handler
      Runtime: python3.8
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub
              - Glaedis-${EnvironmentName}-CodeBucketName
              - { EnvironmentName: !Ref EnvironmentName }
        S3Key: GetUser.zip
      Role: !GetAtt UserLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME:
            Fn::ImportValue:
              !Sub
                - Glaedis-${EnvironmentName}-UserTableName
                - { EnvironmentName: !Ref EnvironmentName }
          CORS_URL:
            - !Sub
              - https://www.${Domain}
              - Domain:
                  Fn::ImportValue:
                    !Sub
                    - Glaedis-${EnvironmentName}-RootDomain
                    - { EnvironmentName: !Ref EnvironmentName }

  GetUserPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref GetUserFunction
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/user
        - __Stage__: '*'
          __ApiId__: !Ref UserApi

  GenerateKeyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - GlaedisGenerateKeyLambda-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      Handler: main.handler
      Runtime: python3.8
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub
              - Glaedis-${EnvironmentName}-CodeBucketName
              - { EnvironmentName: !Ref EnvironmentName }
        S3Key: GenerateKey.zip
      Role: !GetAtt UserLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME:
            Fn::ImportValue:
              !Sub
                - Glaedis-${EnvironmentName}-UserTableName
                - { EnvironmentName: !Ref EnvironmentName }
          CORS_URL:
            - !Sub
              - https://www.${Domain}
              - Domain:
                  Fn::ImportValue:
                    !Sub
                    - Glaedis-${EnvironmentName}-RootDomain
                    - { EnvironmentName: !Ref EnvironmentName }

  GenerateKeyPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref GenerateKeyFunction
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/generate-key
        - __Stage__: '*'
          __ApiId__: !Ref UserApi

  UserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "UserTableAccessPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem*'
                  - 'dynamodb:UpdateItem*'
                  - 'dynamodb:GetItem*'
                  - 'dynamodb:Query*'
                Resource:
                  Fn::ImportValue:
                    !Sub
                      - Glaedis-${EnvironmentName}-UserTableArn
                      - { EnvironmentName: !Ref EnvironmentName }

