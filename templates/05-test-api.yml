Description: ALB And Lambdas
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

Resources:
  Domain:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneName: glaedis.com.
      Name: !Sub
        - test.${Domain}.
        - Domain:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-RootDomain
              - { EnvironmentName: !Ref EnvironmentName }
      Type: A

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balance allow port 443 traffic
      VpcId:
        Fn::ImportValue:
          !Sub
          - Glaedis-${EnvironmentName}-VPCID
          - { EnvironmentName: !Ref EnvironmentName }
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: TCP
        ToPort: 443

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub
        - GlaedisLoadBalancer-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      Subnets:
        - Fn::ImportValue:
            !Sub
            - Glaedis-${EnvironmentName}-PublicSubnetA
            - { EnvironmentName: !Ref EnvironmentName }
        - Fn::ImportValue:
            !Sub
            - Glaedis-${EnvironmentName}-PublicSubnetB
            - { EnvironmentName: !Ref EnvironmentName }

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LambdaFunctionPermission
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Port: 443
      Certificates:
        - CertificateArn:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-RegionalCertArn
              - { EnvironmentName: !Ref EnvironmentName }
      Protocol: HTTPS

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - AvailabilityZone: all
          Id: !GetAtt Lambda.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - GlaedisUserLambdaRole-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UserTableAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:UpdateItem*'
                  - 'dynamodb:GetItem*'
                  - 'dynamodb:Query*'
                Resource:
                  - Fn::ImportValue:
                      !Sub
                      - Glaedis-${EnvironmentName}-UserTableArn
                      - { EnvironmentName: !Ref EnvironmentName }
                  - !Sub
                    - '${TableName}/index/KeyLookup'
                    - TableName:
                        Fn::ImportValue:
                          !Sub
                          - Glaedis-${EnvironmentName}-UserTableArn
                          - { EnvironmentName: !Ref EnvironmentName }
                Effect: Allow


  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - GlaedisTestKeyLambda-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub
            - Glaedis-${EnvironmentName}-CodeBucketName
            - { EnvironmentName: !Ref EnvironmentName }
        S3Key: TestKey.zip
      Description: Test Service function
      Handler: main.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-UserTableName
              - { EnvironmentName: !Ref EnvironmentName }
          CORS_URL:
            !Sub
              - https://www.${Domain}
              - Domain:
                  Fn::ImportValue:
                    !Sub
                    - Glaedis-${EnvironmentName}-RootDomain
                    - { EnvironmentName: !Ref EnvironmentName }

Outputs:
  TestApiUrl:
    Description: "API endpoint URL"
    Value: !Sub
      - 'https://test.${RootDomain}/'
      - RootDomain:
          Fn::ImportValue:
            !Sub
            - Glaedis-${EnvironmentName}-RootDomain
            - { EnvironmentName: !Ref EnvironmentName }
