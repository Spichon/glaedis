AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  fastAPI aws lambda example

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

Resources:
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn:
        Fn::ImportValue:
          !Sub
          - Glaedis-${EnvironmentName}-RegionalCertArn
          - { EnvironmentName: !Ref EnvironmentName }
      DomainName: !Sub
        - app.${Domain}
        - Domain:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-RootDomain
              - { EnvironmentName: !Ref EnvironmentName }
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref AppApiGateway
      Stage: 'prod'

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref AppApiDeployment0
      Description: Lambda API Stage v0
      RestApiId: !Ref AppApiGateway
      StageName: 'prod'

  AppApiDeployment0:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - AppApiGateway
    Properties:
      RestApiId: !Ref AppApiGateway
      Description: 'App RestApi deployment id: 0'
      StageName: !Ref EnvironmentName

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue:
          !Sub
          - Glaedis-${EnvironmentName}-HostedZoneId
          - { EnvironmentName: !Ref EnvironmentName }
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt DomainName.RegionalHostedZoneId
        DNSName: !GetAtt DomainName.RegionalDomainName

  AppApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Properties:
            RestApiId:
              Ref: AppApiGateway
            Path: /{proxy+}
            Method: ANY
          Type: Api
      FunctionName: !Sub
        - GlaedisAppLambda-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      CodeUri: ./
      Handler: app.main.handler
      Runtime: python3.7
      Timeout: 300 # timeout of your lambda function
      MemorySize: 128 # memory size of your lambda function
      Description: fastAPI aws lambda example
      # other options, see ->
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html#sam-specification-template-anatomy-globals-supported-resources-and-properties
      Role: !GetAtt LambdaIamRole.Arn

  AppApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: 'prod'
      OpenApiVersion: '3.0.0'


  GetUserPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref AppApiLambda
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/user
        - __Stage__: '*'
          __ApiId__: !Ref AppApiGateway

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
