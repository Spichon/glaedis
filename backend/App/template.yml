AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

Resources:
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn:
        Fn::ImportValue:
          !Sub
          - Glaedis-${EnvironmentName}-RegionalCertArn
          - { EnvironmentName: !Ref EnvironmentName }
      DomainName: !Sub
        - app.${Domain}
        - Domain:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-RootDomain
              - { EnvironmentName: !Ref EnvironmentName }
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    DependsOn:
      - AppApi
      - AppFunction
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref AppApi
      Stage: !Ref AppApi.Stage

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue:
          !Sub
          - Glaedis-${EnvironmentName}-HostedZoneId
          - { EnvironmentName: !Ref EnvironmentName }
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt DomainName.RegionalHostedZoneId
        DNSName: !GetAtt DomainName.RegionalDomainName

  AppApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - glaedis-AppApiGateway-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      StageName: !Ref EnvironmentName
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn:
              - Fn::ImportValue:
                  !Sub
                  - Glaedis-${EnvironmentName}-CognitoUserPoolArn
                  - { EnvironmentName: !Ref EnvironmentName }

  AppFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Properties:
            RestApiId:
              Ref: AppApi
            Path: /{proxy+}
            Method: ANY
            Auth:
              Authorizer: MyCognitoAuthorizer
          Type: Api
      FunctionName: !Sub
        - GlaedisAppLambda-${EnvironmentName}
        - { EnvironmentName: !Ref EnvironmentName }
      CodeUri: ./
      Handler: app.main.handler
      Runtime: python3.7
      Timeout: 300 # timeout of your lambda function
      MemorySize: 128 # memory size of your lambda function
      Description: fastAPI aws lambda example
      # other options, see ->
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html#sam-specification-template-anatomy-globals-supported-resources-and-properties
      Role: !GetAtt LambdaIamRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_ID:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-CognitoUserPoolId
              - { EnvironmentName: !Ref EnvironmentName }
          COGNITO_REGION: !Ref AWS::Region
          DB_URL:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-EndpointMaster
              - { EnvironmentName: !Ref EnvironmentName }
          DB_URL_REPLICA:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-PortReadReplica
              - { EnvironmentName: !Ref EnvironmentName }
          DB_NAME:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-DBName
              - { EnvironmentName: !Ref EnvironmentName }
          DB_USER:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-DBUser
              - { EnvironmentName: !Ref EnvironmentName }
          DB_PASSWORD:
            Fn::ImportValue:
              !Sub
              - Glaedis-${EnvironmentName}-DBPassword
              - { EnvironmentName: !Ref EnvironmentName }
          PROJECT_NAME: "Glaedis"

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt AppFunction.Arn

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
